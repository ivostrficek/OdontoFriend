// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SqlPlus.net
//     Generated DateTime: 01-Nov-19 11:58:04 PM
//     For more information on SqlPlus.net visit http://www.SqlPlus.net
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using DataAccessService.Consultorio.Models;

namespace DataAccessService.Consultorio
{
    public partial class Service
    {

        /// <summary>
        /// Builds the command object for PacienteQuery method
        /// </summary>
        /// <param name="cnn">The connection that will execute the procedure</param>
        /// <returns>SqlCommand ready for execution</returns>
        private SqlCommand GetPacienteQueryCommand(SqlConnection cnn)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.StoredProcedure,
                CommandText = "dbo.PacienteQuery",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@ReturnValue",
                Direction = ParameterDirection.ReturnValue,
                SqlDbType = SqlDbType.Int,
                Scale = 0,
                Precision = 10,
                Value = DBNull.Value
            });

            return result;
        }
        private void SetPacienteQueryCommandOutputs(SqlCommand cmd, PacienteQueryOutput output)
        {
            if(cmd.Parameters[0].Value != DBNull.Value)
            {
                output.ReturnValue = (PacienteQueryOutput.Returns)cmd.Parameters[0].Value;
            }
        }

        private PacienteQueryResult GetPacienteQueryResultFromReader(SqlDataReader rdr)
        {
            PacienteQueryResult result = new PacienteQueryResult();

            result.IdPaciente = rdr.GetInt32(0);

            if(!rdr.IsDBNull(1))
            {
                result.DNI = rdr.GetString(1);
            }

            if(!rdr.IsDBNull(2))
            {
                result.Nombre = rdr.GetString(2);
            }

            if(!rdr.IsDBNull(3))
            {
                result.Apellido = rdr.GetString(3);
            }

            if(!rdr.IsDBNull(4))
            {
                result.Telefono = rdr.GetString(4);
            }

            if(!rdr.IsDBNull(5))
            {
                result.FechaNacimientoS = rdr.GetString(5);
            }

            if(!rdr.IsDBNull(6))
            {
                result.FechaNacimiento = rdr.GetDateTime(6);
            }

            if(!rdr.IsDBNull(7))
            {
                result.Domicilio = rdr.GetString(7);
            }

            if(!rdr.IsDBNull(8))
            {
                result.Sexo = rdr.GetString(8);
            }

            if(!rdr.IsDBNull(9))
            {
                result.Localidad = rdr.GetString(9);
            }

            return result;
        }


        private void PacienteQueryCommand(SqlCommand cmd, PacienteQueryOutput output)
        {
		
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                output.ResultData = new List<PacienteQueryResult>();
                while(rdr.Read())
                {
                    output.ResultData.Add(GetPacienteQueryResultFromReader(rdr));
                }
                rdr.Close();
            }
            SetPacienteQueryCommandOutputs(cmd, output);
		}

        /// <summary>
        /// Queries dbo.Paciente table.
        /// SQL+ Routine: dbo.PacienteQuery - Authored by IStrficek
        /// </summary>
        public PacienteQueryOutput PacienteQuery()
        {
            PacienteQueryOutput output = new PacienteQueryOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = GetPacienteQueryCommand(sqlConnection))
                {
                    cmd.Transaction = sqlTransaction;
                    PacienteQueryCommand(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if(idx > 0)
                {
                    System.Threading.Thread.Sleep(retryOptions.RetryIntervals[idx-1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = GetPacienteQueryCommand(cnn))
                    {
                        cnn.Open();
						PacienteQueryCommand(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    bool throwException = true;

                    if(retryOptions.TransientErrorNumbers.Contains(sqlException.Number))
                    {
                        throwException = (idx == retryOptions.RetryIntervals.Count);

                        if (retryOptions.Logger != null)
                        {
                            retryOptions.Logger.Log(sqlException);
                        }
                    }
                    if(throwException)
                    {
                        throw;
                    }
                }
            }
            return output;
        }
    }
}