// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SqlPlus.net
//     Generated DateTime: 01-Nov-19 11:58:04 PM
//     For more information on SqlPlus.net visit http://www.SqlPlus.net
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using DataAccessService.Consultorio.Models;

namespace DataAccessService.Consultorio
{
    public partial class Service
    {

        /// <summary>
        /// Builds the command object for GetObraSocialComplete method.
        /// </summary>
        /// <param name="cnn">The connection that will execute the procedure.</param>
        /// <param name="input">GetObraSocialCompleteInput instance for loading parameter values.</param>
        /// <returns>SqlCommand ready for execution.</returns>
        private SqlCommand GetGetObraSocialCompleteCommand(SqlConnection cnn, IGetObraSocialCompleteInput input)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.StoredProcedure,
                CommandText = "dbo.GetObraSocialComplete",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@idPaciente",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.Int,
                Scale = 0,
                Precision = 10,
				Value = input.idPaciente
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@ReturnValue",
                Direction = ParameterDirection.ReturnValue,
                SqlDbType = SqlDbType.Int,
                Scale = 0,
                Precision = 10,
                Value = DBNull.Value
            });

            return result;
        }
        private void SetGetObraSocialCompleteCommandOutputs(SqlCommand cmd, GetObraSocialCompleteOutput output)
        {
            if(cmd.Parameters[1].Value != DBNull.Value)
            {
                output.ReturnValue = (GetObraSocialCompleteOutput.Returns)cmd.Parameters[1].Value;
            }
        }

        private GetObraSocialCompleteResult GetGetObraSocialCompleteResultFromReader(SqlDataReader rdr)
        {
            GetObraSocialCompleteResult result = new GetObraSocialCompleteResult();

            result.IdPaciente = rdr.GetInt32(0);

            if(!rdr.IsDBNull(1))
            {
                result.IdObraSocial = rdr.GetInt32(1);
            }

            if(!rdr.IsDBNull(2))
            {
                result.Nombre = rdr.GetString(2);
            }

            if(!rdr.IsDBNull(3))
            {
                result.Codigo = rdr.GetString(3);
            }

            if(!rdr.IsDBNull(4))
            {
                result.Empresa = rdr.GetString(4);
            }

            if(!rdr.IsDBNull(5))
            {
                result.Plan = rdr.GetString(5);
            }

            if(!rdr.IsDBNull(6))
            {
                result.AsociadoTitular = rdr.GetString(6);
            }

            if(!rdr.IsDBNull(7))
            {
                result.Afiliado = rdr.GetString(7);
            }

            if(!rdr.IsDBNull(8))
            {
                result.Gravado = rdr.GetBoolean(8);
            }

            return result;
        }


        private void GetObraSocialCompleteCommand(SqlCommand cmd, GetObraSocialCompleteOutput output)
        {
		
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                output.ResultData = new List<GetObraSocialCompleteResult>();
                while(rdr.Read())
                {
                    output.ResultData.Add(GetGetObraSocialCompleteResultFromReader(rdr));
                }
                rdr.Close();
            }
            SetGetObraSocialCompleteCommandOutputs(cmd, output);
		}

        /// <summary>
        /// Selects rows with all the information about obra social.
        /// SQL+ Routine: dbo.GetObraSocialComplete - Authored by IvoStrficek
        /// </summary>
        public GetObraSocialCompleteOutput GetObraSocialComplete(IGetObraSocialCompleteInput input)
        {
            if (!input.IsValid())
            {
		        throw new ArgumentException("GetObraSocialCompleteInput fails validation - use the GetObraSocialCompleteInput.IsValid() method prior to passing the input argument to the GetObraSocialComplete method.", "input");
            }
			
            GetObraSocialCompleteOutput output = new GetObraSocialCompleteOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = GetGetObraSocialCompleteCommand(sqlConnection, input))
                {
                    cmd.Transaction = sqlTransaction;
                    GetObraSocialCompleteCommand(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if(idx > 0)
                {
                    System.Threading.Thread.Sleep(retryOptions.RetryIntervals[idx-1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = GetGetObraSocialCompleteCommand(cnn, input))
                    {
                        cnn.Open();
						GetObraSocialCompleteCommand(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    bool throwException = true;

                    if(retryOptions.TransientErrorNumbers.Contains(sqlException.Number))
                    {
                        throwException = (idx == retryOptions.RetryIntervals.Count);

                        if (retryOptions.Logger != null)
                        {
                            retryOptions.Logger.Log(sqlException);
                        }
                    }
                    if(throwException)
                    {
                        throw;
                    }
                }
            }
            return output;
        }
    }
}